#!/bin/bash
# {{ ansible_managed }}
#
# MIT License
#
# Copyright (c) 2017, 2018, 2019 Fabrizio Colonna <colofabrix@tin.it>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Skip all for noninteractive shells.
# https://www.gnu.org/software/bash/manual/html_node/Is-this-Shell-Interactive_003f.html
[[ "$-" != *"i"* ]] && return

_get_git_tag() {
    local git_status="$(git status --porcelain --branch 2> /dev/null)"
    local git_branch="$(sed -nre 's/^## ([^\.]+).*/\1/p' <<< "${git_status}")"
    [[ -z "${git_branch}" ]] && echo -n "" && exit

    # Using AWK to improve performance
    local awk_command='
    function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }

    BEGIN {
        output = ""
        modified = ""
        added = ""
        deleted = ""
        other = ""
        untracked = ""
    }

    /^(.A|A.) /       { added += 1 }
    /^(.D|D.) /       { deleted += 1 }
    /^(.[MU]|[MU].) / { modified += 1 }
    /^(.[RC]|[RC].) / { other += 1 }
    /^(\?\?) /        { untracked += 1 }

    END {
        if (added != "")     output = output "\033[92m" added "A "
        if (deleted != "")   output = output "\033[91m" deleted "D "
        if (modified != "")  output = output "\033[93m" modified "M "
        if (other != "")     output = output "\033[96m" other "O "
        if (untracked != "") output = output "\033[95m" untracked "? "
        if (output != "")
            print " (" rtrim(output) "\033[0m" ")"
    }'
    local git_summary="$(echo "${git_status}" | awk "$awk_command")"

    echo -en "${C_FORE_LIGHT_CYAN}${git_branch}${git_summary}${C_FORE_DEFAULT}"
}

_set_prompt() {
    local last_command=$?       # Must be the first one here
    local tags=()
    local lines=()
    local oIFS=$IFS; IFS=""

    #
    # Tags
    #

    # Date
    tags+=("${C_FORE_WHITE}$(date +"%a %x %X")")

    # Username
    current_user="${USERNAME:-${USER}}"

    # Root user
    if [[ $EUID == 0 ]] ; then
        tags+=("${C_FORE_LIGHT_RED}ROOT")
    fi

    # GIT repository
    if [[ "${GIT_INSTALLED}" == "true" ]] ; then
        local git_tag="$(_get_git_tag)"
        if [[ -n "${git_tag}" ]] ; then
            tags+=("$git_tag")
        fi
    fi

    # Command number
    tags+=("${C_FORE_WHITE}\!")

    # Result of last command
    if [[ ${last_command} != 0 ]] ; then
        tags+=("${C_FORE_LIGHT_RED}${last_command}")
    fi

    #
    # Lines
    #

    # Building LINE 1
    local line=""
    for tag in "${tags[@]}" ; do
        line="${line}${C_FORE_DEFAULT}[${tag}${C_FORE_DEFAULT}]"
    done
    if [[ -n "${line}" ]] ; then
        lines+=("${line}")
    fi

    # Building LINE 2
    lines+=("${C_FORE_GREEN}${current_user}@\h${C_FORE_DEFAULT}: ${C_FORE_BLUE}\w${C_FORE_DEFAULT}")

    # Building LINE 3
    lines+=("\\$ ")

    #
    # Prompt
    #

    export PS1=""
    for ((i = 0; i < {% raw %}${#lines[@]}{% endraw %}; i++)) ; do
        PS1="${PS1}\n${lines[$i]}"
    done

    # Emergency prompt, back to the usual one
    #export PS1="\u@\h: \\$ "

    IFS=$oIFS
}

export PROMPT_COMMAND="_set_prompt"
export GIT_INSTALLED="$(which git > /dev/null 2>&1 && echo true || echo false)"

# vim: ft=sh:ts=4:sw=4
